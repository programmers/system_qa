#!/bin/bash

## Ecosystems (aka "ecos") array
declare -A ecosystems
ecosystems["--c_c++"]="C and C++"
ecosystems["--cloud"]="Cloud"
ecosystems["--containers_vm"]="Containers and VMs"
ecosystems["--db_clients"]="Database Clients"
ecosystems["--go"]="Go"
ecosystems["--java"]="Java"
ecosystems["--javascript_node"]="JavaScript and Node"
ecosystems["--php"]="PHP"
ecosystems["--python"]="Python"
ecosystems["--ruby"]="Ruby"
ecosystems["--rust"]="Rust"
ecosystems["--version_control"]="Version Control"
ecosystems["--web_tools"]="Web Tools"

valid_args() {
    local valid_args=true
    for arg in "$@"; do
        [ -z "${ecosystems[$arg]}" ] && valid_args=false
    done

    if [ "$valid_args" = false ]; then
        show_cli_screen
        exit 1
    fi
}

## Provide CLI guidance
show_cli_screen() {
cat << EOF
Welcome. Pass in your ecosystems with options below.

Usage: ./progsys [ecosystems]

Options:
$(for eco_key in "${!ecosystems[@]}"; do
    echo "  $eco_key"
done)

EOF
}

## Determines OS: Ubuntu, Fedora, Mac, etc
detect_system() {
    if [ -e "/etc/os-release" ]; then
        ps_system=$(awk -F= '/^ID=/{print $2}' /etc/os-release)
    elif [ "$(uname)" == "Darwin" ]; then 
        ps_system="macos"
    fi
}


exec_script() {
    script="$1"
    log_file="/tmp/progsys.log"

    if command -v timeout >/dev/null 2>&1; then
        timeout_duration=$((60 * 60))
        timeout "$timeout_duration" bash "$script"
        exit_code=$?

        if [[ $exit_code -eq 124 ]]; then
            echo -e "[$(date)] [$exit_code] Failed to run \"$script\": Timeout..." >> "$log_file"
        elif [[ $exit_code -ne 0 ]]; then
            echo -e "[$(date)] [$exit_code] Failed to run \"$script\"..." >> "$log_file"
            # Continue...
        else
            echo -e "[$(date)] [$exit_code] Successfully ran \"$script\"" >> "$log_file"
        fi
    else
        echo "Error: 'timeout' command not found. Please install it." >> "$log_file"
    fi
}

### Core software/dependencies ("base" script) - ran only once
install_core_software() {
    local base_script="$ps_root/systems/$ps_system/_Base_/_Init_.sh"
    local base_lock_file="/var/run/progsys.lock"

    #if [ ! -e "$base_lock_file" ]; then
    #    echo "Installing core software and dependencies"
    #    exec_script "$base_script"
    #    #touch "$base_lock_file"
    #fi
}

### Main installation logic
install_ecosystems() {
    local selected_flags=("$@")

    mapfile -t lines < "$ps_root/systems/$ps_system/requirements.txt"

    for line in "${lines[@]}"; do
        if [[ $line =~ ^## ]]; then
            current_section=$(echo "$line" | sed -n 's/## \(.*\) ##/\1/p')
        elif [[ ! $line =~ ^[[:space:]]*$ ]]; then
            section_name=$(echo "$current_section" | xargs)  # Trim leading/trailing whitespaces
            for selected_flag in "${!selected_flags[@]}"; do
                flag_key="${selected_flags[$selected_flag]}"
                ecos_key="${ecosystems[$flag_key]}"

                if [ "$current_section" == "$ecos_key" ]; then
                    install_ecosystem "$ecos_key" "$line"
                fi
            done
        fi
    done
}

### Install specific ecosystem
install_ecosystem() {
    local eco_key="$1"
    local line="$2"


    if ! [[ $line =~ ^# ]]; then
        line="${line//#}"
        script=$(find "$ps_root/systems/$ps_system/$eco_key" -maxdepth 1 -type f -name "*$line*" -exec echo {} \;)
        echo -e "[$eco_key] Installing $line..."

        exec_script "$script"
    fi
}

main() {
    sudo -v # Nix approach to prompting for sudo

    valid_args "$@"
    detect_system
    export ps_root="/home/$(whoami)/repo"

    # calls shared packages
    exec() { . "$ps_root/$1"; }

    export -f exec

    install_core_software
    install_ecosystems "$@"
}

main "$@"