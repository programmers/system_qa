#!/bin/bash

### Standard nix approach for prompting user for sudo privileges

if [ "$EUID" -ne 0 ]; then
    sudo "$0" "$@"
    exit $?
fi

### ecosystems

declare -A ecosystems
ecosystems["--c_c++"]="C and C++"
ecosystems["--cloud"]="Cloud"
ecosystems["--containers_vm"]="Containers and VMs"
ecosystems["--db_clients"]="Database Clients"
ecosystems["--go"]="Go"
ecosystems["--java"]="Java"
ecosystems["--javascript_node"]="JavaScript and Node"
ecosystems["--php"]="PHP"
ecosystems["--python"]="Python"
ecosystems["--ruby"]="Ruby"
ecosystems["--rust"]="Rust"
ecosystems["--version_control"]="Version Control"
ecosystems["--web_tools"]="Web Tools"


valid_args=true

for arg in "$@"; do
    [ -z "${ecosystems[$arg]}" ] && valid_args=false
done

## CLI screen

if [ "$valid_args" = false ]; then
cat << EOF

Welcome. Pass in your ecosystems with options below.

Usage: ./progsys [ecosystems]

Options:
$(for eco_key in "${!ecosystems[@]}"; do
    echo "  $eco_key"
done)

EOF

exit 1
fi

## Determine Mac or Linux distribution

ps_system=""
if [ -e "/etc/os-release" ]; then
 	ps_system=$(awk -F= '/^ID=/{print $2}' /etc/os-release)
elif [ "$(uname)" == "Darwin" ]; then 
	ps_system="macos"
fi

### Since we are running as root, ensure home user is set
export ps_root="/home/$SUDO_USER/repo/"

check() { [ -e "$1" ]; }
export -f check

call()  { . "$ps_root$1"; }
export -f call 

base_script="$ps_root""systems/$ps_system/_Base_/_Init_.sh"
base_installed_file="/var/run/programmers_system_installed"

if [ ! -e "$base_installed_file" ]; then
    echo "Installing core software and dependencies"

    #bash $base_script

    touch "$base_installed_file"
fi


selected_flags=("$@")

mapfile -t lines < "$ps_root/systems/$ps_system/requirements.txt"

for line in "${lines[@]}"; do
    if [[ $line =~ ^## ]]; then
        current_section=$(echo "$line" | sed -n 's/## \(.*\) ##/\1/p')
    elif [[ ! $line =~ ^[[:space:]]*$ ]]; then
        section_name=$(echo "$current_section" | xargs)  # Trim leading/trailing whitespaces
        for selected_flag in "${!selected_flags[@]}"; do
            flag_key="${selected_flags[$selected_flag]}"
            ecos_key="${ecosystems[$flag_key]}"

            if [ "$current_section" == "$ecos_key" ]; then
                eco_key="[$ecos_key]"

                timeout_duration=$((60 * 60))

                if ! [[ $line =~ ^# ]]; then
                    line="${line//#}"

                    echo -e "$eco_key Installing $line..."
                    script="$ps_root""systems/$ps_system/$ecos_key/$line.sh"

                    #timeout "$timeout_duration" bash "$script"
                    exit_code=$?

                    if [[ $exit_code -eq 124 ]]; then
                        # Timeout occurred
                        echo -e "$eco_key [$exit_code] Failed to install ${line}: Timeout..."
                    elif [[ $exit_code -ne 0 ]]; then
                        # Other errors
                        echo -e "$eco_key [$exit_code] Failed to install ${line}..."
                        #echo -e "$eco_key_red [$exit_code] Failed to install ${line//#}..."
                    fi
                fi
            fi
        done
    fi
done
